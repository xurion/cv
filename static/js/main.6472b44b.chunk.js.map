{"version":3,"sources":["components/ReadMore.tsx","components/List.tsx","components/TitledList.tsx","components/Experience.tsx","components/Subtitle.tsx","components/TabularDetails.tsx","components/Br.tsx","components/Portrait.tsx","components/GithubRibbon.tsx","components/BlockStrip.tsx","App.tsx","Config.ts","serviceWorker.ts","index.tsx"],"names":["ReadMore","props","useState","show","setShow","children","Button","block","color","onClick","SubList","points","map","point","key","toString","List","Array","isArray","TitledList","title","Experience","classNames","experience","noMargin","className","Row","Col","jobTitle","xs","src","process","companyLogo","alt","companyName","formerCompanyName","startDate","format","endDate","otherTitles","join","about","i","aboutReadMore","length","additionalSkillList","skills","Subtitle","TabularDetails","TabularDetail","label","TabularDetailLink","href","url","Br","Portrait","name","GithubRibbonContainer","styled","div","GithubRibbonLink","a","GithubRibbon","BlockStrip","config","getConfig","App","fullName","forenames","surname","Container","githubRibbonUrl","sm","md","lg","profession","introductions","introduction","complimentarySkills","me","m","meReadMore","dob","gender","location","citizenship","telephone","email","cvUrl","exp","social","text","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6472b44b.chunk.js","sourcesContent":["import React, { FC, useState } from \"react\";\nimport { Button } from \"reactstrap\";\n\nconst ReadMore: FC = (props) => {\n  const [show, setShow] = useState(false);\n\n  return show ? (\n    <>{props.children}</>\n  ) : (\n    <Button\n      block\n      color=\"primary\"\n      onClick={() => {\n        setShow(true);\n      }}\n    >\n      Read more\n    </Button>\n  );\n};\n\nexport default ReadMore;\n","import React from \"react\";\nimport { NestedStringArray } from \"../types\";\n\ntype ListProps = {\n  points: NestedStringArray;\n};\n\ntype SubListProps = {\n  points: string[];\n};\n\nconst SubList = (props: SubListProps) => (\n  <ul>\n    {props.points.map((point, key) => (\n      <li key={key.toString()}>{point}</li>\n    ))}\n  </ul>\n);\n\nconst List = (props: ListProps) => (\n  <ul>\n    {props.points.map((point, key) => {\n      return (\n        typeof point === \"string\" && (\n          <li key={key.toString()}>\n            {point}\n            {Array.isArray(props.points[key + 1]) && (\n              <SubList points={props.points[key + 1] as string[]} />\n            )}\n          </li>\n        )\n      );\n    })}\n  </ul>\n);\n\nexport default List;\n","import React from \"react\";\nimport { NestedStringArray } from \"../types\";\nimport List from \"./List\";\n\ntype TitledListProps = {\n  title: string;\n  points: NestedStringArray;\n};\n\nconst TitledList = (props: TitledListProps) => {\n  return (\n    <>\n      <p>{props.title}</p>\n      <List points={props.points} />\n    </>\n  );\n};\n\nexport default TitledList;\n","import React, { FC } from \"react\";\nimport { Row, Col } from \"reactstrap\";\nimport Moment from \"react-moment\";\nimport { Experience as _Experience } from \"../types\";\nimport ReadMore from \"./ReadMore\";\nimport TitledList from \"./TitledList\";\n\ntype ExperienceProps = {\n  experience: _Experience;\n  noMargin?: boolean;\n};\n\nconst Experience: FC<ExperienceProps> = (props) => {\n  let classNames = \"experience\";\n  const { experience, noMargin } = props;\n  classNames = noMargin ? `${classNames} last` : classNames;\n\n  return (\n    <div className={classNames}>\n      <Row>\n        <Col>\n          <h4 className=\"job-title text-center\">{experience.jobTitle}</h4>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center\">\n        <Col xs=\"6\">\n          <div className=\"company-logo\">\n            <img\n              src={`${process.env.PUBLIC_URL}/images/${experience.companyLogo}`}\n              alt={experience.companyName}\n              title={experience.companyName}\n            />\n          </div>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          {experience.formerCompanyName && (\n            <div className=\"formerly text-center small\">\n              Formerly {experience.formerCompanyName}\n            </div>\n          )}\n          <p className=\"period text-center font-weight-bold small\">\n            {typeof experience.startDate === \"number\" ? (\n              <Moment format=\"MMM YYYY\">{experience.startDate}</Moment>\n            ) : (\n              experience.startDate\n            )}{\" \"}\n            -{\" \"}\n            {experience.endDate ? (\n              typeof experience.endDate === \"number\" ? (\n                <Moment format=\"MMM YYYY\">{experience.endDate}</Moment>\n              ) : (\n                experience.endDate\n              )\n            ) : (\n              \"Present\"\n            )}\n          </p>\n          <div className=\"experience-specifics\">\n            {experience.otherTitles && (\n              <p className=\"other-titles text-left small\">\n                <b>Other titles:</b> {experience.otherTitles.join(\", \")}\n              </p>\n            )}\n            {experience.about.map((about, i) => (\n              <p key={i.toString()}>{about}</p>\n            ))}\n            {experience.aboutReadMore && experience.aboutReadMore.length > 0 ? (\n              <ReadMore>\n                {experience.aboutReadMore.map((about, i) => (\n                  <p key={i.toString()}>{about}</p>\n                ))}\n                {experience.additionalSkillList && (\n                  <TitledList\n                    points={experience.additionalSkillList.skills}\n                    title={experience.additionalSkillList.title}\n                  />\n                )}\n              </ReadMore>\n            ) : (\n              experience.additionalSkillList && (\n                <ReadMore>\n                  <TitledList\n                    points={experience.additionalSkillList.skills}\n                    title={experience.additionalSkillList.title}\n                  />\n                </ReadMore>\n              )\n            )}\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Experience;\n","import React, { FC } from \"react\";\n\nconst Subtitle: FC = (props) => {\n  return (\n    <>\n      <h2 className=\"subtitle-text text-center\">{props.children}</h2>\n      <div className=\"subtitle-base\" />\n    </>\n  );\n};\n\nexport default Subtitle;\n","import React, { FC } from \"react\";\n\nconst TabularDetails: FC = (props) => {\n  return (\n    <table className=\"tab-details\">\n      <tbody>{props.children}</tbody>\n    </table>\n  );\n};\n\nexport default TabularDetails;\n\ntype TabularDetailProps = {\n  label: string;\n};\n\nexport const TabularDetail: FC<TabularDetailProps> = (props) => {\n  return (\n    <tr key={`detail-${props.label}`}>\n      <td className=\"label\">{props.label}</td>\n      <td className=\"detail\">{props.children}</td>\n    </tr>\n  );\n};\n\ntype TabularDetailLinkProps = {\n  label: string;\n  url: string;\n};\n\nexport const TabularDetailLink: FC<TabularDetailLinkProps> = (props) => {\n  return (\n    <tr>\n      <td className=\"label\">{props.label}</td>\n      <td className=\"detail\">\n        <a href={props.url} key={`link-${props.url}`}>\n          {props.children}\n        </a>\n      </td>\n    </tr>\n  );\n};\n","import React from \"react\";\n\ntype BrProps = {\n  className?: string;\n};\n\nconst Br = (props: BrProps) => {\n  let className = \"br\";\n  className = props.className ? `${className} ${props.className}` : className;\n\n  return <br className={className} />;\n};\n\nexport default Br;\n","import React from \"react\";\n\ntype PortraitProps = {\n  name: string;\n};\n\nconst Portrait = (props: PortraitProps) => {\n  return (\n    <img\n      className=\"img-fluid profile-pic\"\n      src={`${process.env.PUBLIC_URL}/images/me.png`}\n      alt={props.name}\n    />\n  );\n};\n\nexport default Portrait;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ntype GithubRibbonProps = {\n  url: string;\n};\n\nconst GithubRibbonContainer = styled.div`\n  display: block;\n  position: absolute;\n  right: 0;\n  top: 0;\n  z-index: 9999;\n`;\n\nconst GithubRibbonLink = styled.a`\n  background: #666;\n  box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.8);\n  color: #fff;\n  font-size: 14px;\n  font-weight: bold;\n  padding: 5px 40px;\n  position: absolute;\n  right: -70px;\n  text-align: center;\n  text-decoration: none;\n  top: 50px;\n  transform: rotate(45deg);\n  transition: 0.5s;\n  width: 275px;\n\n  &:hover {\n    background: #777;\n    color: #fff;\n    text-decoration: none;\n  }\n\n  &::before,\n  &::after {\n    background: #fff;\n    content: \"\";\n    display: block;\n    height: 1px;\n    left: 0;\n    position: absolute;\n    top: 1px;\n    width: 100%;\n  }\n\n  &::after {\n    bottom: 1px;\n    top: auto;\n  }\n`;\n\nconst GithubRibbon = (props: GithubRibbonProps) => {\n  return (\n    <GithubRibbonContainer>\n      <GithubRibbonLink href={props.url}>Fork me on GitHub</GithubRibbonLink>\n    </GithubRibbonContainer>\n  );\n};\n\nexport default GithubRibbon;\n","import React from \"react\";\n\nconst BlockStrip = () => <div className=\"block-strip\" />;\n\nexport default BlockStrip;\n","import React from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\n\nimport \"./App.scss\";\nimport Experience from \"./components/Experience\";\nimport Subtitle from \"./components/Subtitle\";\nimport ReadMore from \"./components/ReadMore\";\nimport List from \"./components/List\";\nimport TabularDetails, {\n  TabularDetail,\n  TabularDetailLink,\n} from \"./components/TabularDetails\";\nimport Br from \"./components/Br\";\nimport Portrait from \"./components/Portrait\";\nimport GithubRibbon from \"./components/GithubRibbon\";\nimport getConfig from \"./Config\";\nimport BlockStrip from \"./components/BlockStrip\";\n\nconst config = getConfig();\n\nconst App = () => {\n  const fullName = `${config.forenames} ${config.surname}`;\n  return (\n    <>\n      <BlockStrip />\n      <Container>\n        {config.githubRibbonUrl && (\n          <GithubRibbon url={config.githubRibbonUrl} />\n        )}\n        <Row>\n          <Col xs={12} sm={8} md={9} lg={10}>\n            <h1 className=\"text-center text-lg-left\">{fullName}</h1>\n            <Col xs={6} className=\"d-sm-none offset-3\">\n              <Portrait name={fullName} />\n            </Col>\n            <div className=\"h2 text-center text-lg-left\">\n              {config.profession}\n            </div>\n          </Col>\n          <Col\n            xs={6}\n            sm={4}\n            md={3}\n            lg={2}\n            className=\"d-none d-sm-block text-lg-right\"\n          >\n            <Portrait name={fullName} />\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={12}>\n            <Br />\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={12} lg={6}>\n            <Subtitle>Introduction</Subtitle>\n            {config.introductions.map((introduction, i) => (\n              <p key={i.toString()}>{introduction}</p>\n            ))}\n            <Br />\n\n            <Subtitle>Skills</Subtitle>\n            <List points={config.skills} />\n            <Br />\n\n            {config.complimentarySkills && (\n              <>\n                <Subtitle>Complimentary skills</Subtitle>\n                <List points={config.complimentarySkills} />\n                <Br />\n              </>\n            )}\n\n            <Subtitle>Me</Subtitle>\n            {config.me.map((m, i) => (\n              <p key={i.toString()}>{m}</p>\n            ))}\n            {config.meReadMore && (\n              <>\n                <ReadMore>\n                  {config.meReadMore.map((m, i) => (\n                    <p key={i.toString()}>{m}</p>\n                  ))}\n                </ReadMore>\n                <Br />\n              </>\n            )}\n\n            <Subtitle>Contact</Subtitle>\n            <TabularDetails>\n              <TabularDetail label=\"Surname\">{config.surname}</TabularDetail>\n              <TabularDetail\n                label={`Forename${config.forenames.length > 1 ? \"s\" : \"\"}`}\n              >\n                {config.forenames}\n              </TabularDetail>\n              {config.dob && (\n                <TabularDetail label=\"Birth\">{config.dob}</TabularDetail>\n              )}\n              {config.gender && (\n                <TabularDetail label=\"Gender\">{config.gender}</TabularDetail>\n              )}\n              <TabularDetail label=\"Location\">{config.location}</TabularDetail>\n              <TabularDetail label=\"Citizenship\">\n                {config.citizenship}\n              </TabularDetail>\n              {config.telephone && (\n                <TabularDetail label=\"Telephone\">\n                  {config.telephone}\n                </TabularDetail>\n              )}\n              {config.email && (\n                <TabularDetailLink label=\"Email\" url={`mailto:${config.email}`}>\n                  {config.email}\n                </TabularDetailLink>\n              )}\n              <TabularDetailLink label=\"CV\" url={config.cvUrl}>\n                {config.cvUrl}\n              </TabularDetailLink>\n            </TabularDetails>\n            <Br className=\"d-lg-none\" />\n          </Col>\n\n          <Col xs={12} lg={6}>\n            <Subtitle>Experience</Subtitle>\n            {config.experience.map((exp, i) => (\n              <Experience\n                key={i.toString()}\n                experience={exp}\n                noMargin={i === config.experience.length - 1}\n              />\n            ))}\n            <Br />\n\n            <Subtitle>Social</Subtitle>\n            {config.social && (\n              <TabularDetails>\n                {config.social.map((social, i) => (\n                  <TabularDetailLink\n                    key={i.toString()}\n                    label={social.label}\n                    url={social.url}\n                  >\n                    {social.text}\n                  </TabularDetailLink>\n                ))}\n              </TabularDetails>\n            )}\n          </Col>\n          <Col xs={12}>\n            <Br />\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","import config from \"./config.json\";\nimport { Config } from \"./types\";\n\nconst getConfig = (): Config => config;\n\nexport default getConfig;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}