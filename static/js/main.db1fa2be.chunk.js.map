{"version":3,"sources":["tools/mixins.ts","components/ReadMore.tsx","components/List.tsx","components/TitledList.tsx","Theme.ts","components/Experience.tsx","components/Subtitle.tsx","components/TabularDetails.tsx","components/Br.tsx","components/Portrait.tsx","components/GithubRibbon.tsx","Config.ts","components/BlockStrip.tsx","components/Meta.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Breakpoints","ReadMore","children","useState","show","setShow","Button","block","color","onClick","SubList","props","points","map","point","key","toString","List","Array","isArray","TitledList","title","colours","fontSizes","h1","baseFontSize","h2","h3","h4","h5","h6","StyledH3","styled","primaryRgb","hexRgb","CompanyLogoContainer","div","red","green","blue","Experience","classNames","experience","noMargin","className","Row","Col","jobTitle","xs","src","process","companyLogo","alt","companyName","formerCompanyName","startDate","format","endDate","otherTitles","join","about","i","aboutReadMore","length","additionalSkillList","skills","StyledH2","Base","Subtitle","TabularDetails","links","TabularDetail","label","TabularDetailLink","href","url","Br","br","styles","breakpoint","bp","StyledImg","img","lg","Portrait","name","GithubRibbonContainer","GithubRibbonLink","a","GithubRibbon","target","rel","getConfig","config","BlockStrip","Meta","Helmet","content","App","fullName","forenames","surname","profession","Container","githubRibbonUrl","sm","md","introductions","introduction","complimentarySkills","me","m","meReadMore","dob","gender","location","citizenship","telephone","email","exp","social","text","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db1fa2be.chunk.js","sourcesContent":["enum Breakpoints {\n  xs = 0,\n  sm = 576,\n  md = 768,\n  lg = 992,\n  xl = 1200,\n}\n\nconst breakpoint = (bp: Breakpoints, styles: string) => `\n  @media (min-width: ${bp}px) {\n    ${styles}\n  }\n`;\n\nexport const sm = (styles: string) => breakpoint(Breakpoints.sm, styles);\nexport const md = (styles: string) => breakpoint(Breakpoints.md, styles);\nexport const lg = (styles: string) => breakpoint(Breakpoints.lg, styles);\nexport const xl = (styles: string) => breakpoint(Breakpoints.xl, styles);\n","import React, { useState } from \"react\";\nimport { Button } from \"reactstrap\";\n\nconst ReadMore: React.FC = ({ children }) => {\n  const [show, setShow] = useState(false);\n\n  return show ? (\n    <>{children}</>\n  ) : (\n    <Button\n      block\n      color=\"primary\"\n      onClick={() => {\n        setShow(true);\n      }}\n    >\n      Read more\n    </Button>\n  );\n};\n\nexport default ReadMore;\n","import { NestedStringArray } from \"../types\";\n\ntype ListProps = {\n  points: NestedStringArray;\n};\n\ntype SubListProps = {\n  points: string[];\n};\n\nconst SubList = (props: SubListProps) => (\n  <ul>\n    {props.points.map((point, key) => (\n      <li key={key.toString()}>{point}</li>\n    ))}\n  </ul>\n);\n\nconst List = (props: ListProps) => (\n  <ul>\n    {props.points.map((point, key) => {\n      return (\n        typeof point === \"string\" && (\n          <li key={key.toString()}>\n            {point}\n            {Array.isArray(props.points[key + 1]) && (\n              <SubList points={props.points[key + 1] as string[]} />\n            )}\n          </li>\n        )\n      );\n    })}\n  </ul>\n);\n\nexport default List;\n","import { NestedStringArray } from \"../types\";\nimport List from \"./List\";\n\ntype TitledListProps = {\n  title: string;\n  points: NestedStringArray;\n};\n\nconst TitledList = (props: TitledListProps) => {\n  return (\n    <>\n      <p>{props.title}</p>\n      <List points={props.points} />\n    </>\n  );\n};\n\nexport default TitledList;\n","//https://coolors.co/eae1df-3d405b-d52941-fcd581-e09f3e\n\nconst colours = {\n  primary: \"#3d405b\",\n  secondary: \"#d52941\",\n  tertiary: \"#e09f3e\",\n};\n\nconst baseFontSize = 1;\nconst fontSizes = {\n  h1: `${baseFontSize * 2.5}rem`,\n  h2: `${baseFontSize * 1.6}rem`,\n  h3: `${baseFontSize * 1.4}rem`,\n  h4: `${baseFontSize * 1.25}rem`,\n  h5: `${baseFontSize * 1.25}rem`,\n  h6: `${baseFontSize}rem`,\n};\n\nconst sectionSpacing = \"25px\";\n\nexport { colours, sectionSpacing, fontSizes };\n","import { Row, Col } from \"reactstrap\";\nimport Moment from \"react-moment\";\nimport { Experience as _Experience } from \"../types\";\nimport ReadMore from \"./ReadMore\";\nimport TitledList from \"./TitledList\";\nimport styled from \"styled-components\";\nimport { colours } from \"../Theme\";\nimport hexRgb from \"hex-rgb\";\n\ntype ExperienceProps = {\n  experience: _Experience;\n  noMargin?: boolean;\n};\n\nconst StyledH3 = styled.h3`\n  margin-bottom: 0;\n`;\n\nconst primaryRgb = hexRgb(colours.primary);\nconst CompanyLogoContainer = styled.div`\n  border: 1px solid\n    rgba(${primaryRgb.red}, ${primaryRgb.green}, ${primaryRgb.blue}, 0.25);\n  margin: 8px 0;\n  padding: 5px 7px;\n\n  img {\n    display: block;\n    width: 100%;\n  }\n`;\n\nconst Experience = (props: ExperienceProps) => {\n  let classNames = \"experience\";\n  const { experience, noMargin } = props;\n  classNames = noMargin ? `${classNames} last` : classNames;\n\n  return (\n    <div className={classNames}>\n      <Row>\n        <Col>\n          <StyledH3 className=\"text-center\">{experience.jobTitle}</StyledH3>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center\">\n        <Col xs=\"6\">\n          <CompanyLogoContainer>\n            <img\n              src={`${process.env.PUBLIC_URL}/images/${experience.companyLogo}`}\n              alt={experience.companyName}\n              title={experience.companyName}\n            />\n          </CompanyLogoContainer>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          {experience.formerCompanyName && (\n            <div className=\"formerly text-center small\">\n              Formerly {experience.formerCompanyName}\n            </div>\n          )}\n          <p className=\"period text-center font-weight-bold small\">\n            {typeof experience.startDate === \"number\" ? (\n              <Moment format=\"MMM YYYY\">{experience.startDate}</Moment>\n            ) : (\n              experience.startDate\n            )}{\" \"}\n            -{\" \"}\n            {experience.endDate ? (\n              typeof experience.endDate === \"number\" ? (\n                <Moment format=\"MMM YYYY\">{experience.endDate}</Moment>\n              ) : (\n                experience.endDate\n              )\n            ) : (\n              \"Present\"\n            )}\n          </p>\n          <div className=\"experience-specifics\">\n            {experience.otherTitles && (\n              <p className=\"other-titles text-left small\">\n                <b>Other titles:</b> {experience.otherTitles.join(\", \")}\n              </p>\n            )}\n            {experience.about.map((about, i) => (\n              <p key={i.toString()}>{about}</p>\n            ))}\n            {experience.aboutReadMore && experience.aboutReadMore.length > 0 ? (\n              <ReadMore>\n                {experience.aboutReadMore.map((about, i) => (\n                  <p key={i.toString()}>{about}</p>\n                ))}\n                {experience.additionalSkillList && (\n                  <TitledList\n                    points={experience.additionalSkillList.skills}\n                    title={experience.additionalSkillList.title}\n                  />\n                )}\n              </ReadMore>\n            ) : (\n              experience.additionalSkillList && (\n                <ReadMore>\n                  <TitledList\n                    points={experience.additionalSkillList.skills}\n                    title={experience.additionalSkillList.title}\n                  />\n                </ReadMore>\n              )\n            )}\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Experience;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { colours, fontSizes } from \"../Theme\";\n\nconst StyledH2 = styled.h2`\n  margin-bottom: 0;\n`;\n\nconst Base = styled.div`\n  color: ${colours.secondary};\n  font-size: ${fontSizes.h2};\n  line-height: 0.5;\n  margin-bottom: 1rem;\n  opacity: 0.25;\n  text-align: center;\n\n  &::before {\n    content: \"~\";\n  }\n`;\n\nconst Subtitle: React.FC = ({ children }) => {\n  return (\n    <>\n      <StyledH2 className=\"text-center\">{children}</StyledH2>\n      <Base />\n    </>\n  );\n};\n\nexport default Subtitle;\n","import React from \"react\";\n\ntype TabularDetailsProps = {\n  links?: boolean;\n};\n\nconst TabularDetails: React.FC<TabularDetailsProps> = (props) => {\n  return (\n    <table className={`tab-details${props.links ? \" tab-links\" : \"\"}`}>\n      <tbody>{props.children}</tbody>\n    </table>\n  );\n};\n\nexport default TabularDetails;\n\ntype TabularDetailProps = {\n  label: string;\n};\n\nexport const TabularDetail: React.FC<TabularDetailProps> = (props) => {\n  return (\n    <tr key={`detail-${props.label}`}>\n      <td className=\"label\">{props.label}</td>\n      <td className=\"detail\">{props.children}</td>\n    </tr>\n  );\n};\n\ntype TabularDetailLinkProps = {\n  label: string;\n  url: string;\n};\n\nexport const TabularDetailLink: React.FC<TabularDetailLinkProps> = (props) => {\n  return (\n    <tr>\n      <td className=\"label\">{props.label}</td>\n      <td className=\"detail\">\n        <a href={props.url} key={`link-${props.url}`}>\n          {props.children}\n        </a>\n      </td>\n    </tr>\n  );\n};\n","import styled from \"styled-components\";\nimport { colours, sectionSpacing } from \"../Theme\";\n\nconst Br = styled.br`\n  background: ${colours.secondary};\n  content: \" \";\n  display: block;\n  height: 2px;\n  margin: ${sectionSpacing} 0;\n`;\n\nexport default Br;\n","import styled from \"styled-components\";\nimport { lg } from \"../tools/mixins\";\n\ntype Props = {\n  name: string;\n};\n\nconst StyledImg = styled.img`\n  border-radius: 50%;\n  margin-bottom: 10px;\n  filter: grayscale(100%);\n  margin-bottom: 10px;\n  transition: 1s;\n\n  ${lg(`\n    & {\n      width: 60%;\n    }\n  `)}\n\n  &:hover {\n    filter: none;\n  }\n`;\n\nconst Portrait = (props: Props) => (\n  <StyledImg\n    className=\"img-fluid\"\n    src={`${process.env.PUBLIC_URL}/images/me.png`}\n    alt={props.name}\n  />\n);\n\nexport default Portrait;\n","import styled from \"styled-components\";\n\ntype GithubRibbonProps = {\n  url: string;\n};\n\nconst GithubRibbonContainer = styled.div`\n  display: block;\n  height: 135px;\n  overflow: hidden;\n  position: absolute;\n  right: 0;\n  top: 0;\n  width: 135px;\n  z-index: 9999;\n`;\n\nconst GithubRibbonLink = styled.a`\n  background: #666;\n  box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.8);\n  color: #fff;\n  font-size: 10px;\n  font-weight: bold;\n  line-height: 15px;\n  padding: 4px 0;\n  position: absolute;\n  right: -50px;\n  text-align: center;\n  text-decoration: none;\n  top: 40px;\n  transform: rotate(45deg);\n  transition: 0.5s;\n  width: 200px;\n\n  &:hover {\n    background: #777;\n    color: #fff;\n    text-decoration: none;\n  }\n\n  &::before,\n  &::after {\n    background: #fff;\n    content: \"\";\n    display: block;\n    height: 1px;\n    left: 0;\n    position: absolute;\n    top: 1px;\n    width: 100%;\n  }\n\n  &::after {\n    bottom: 1px;\n    top: auto;\n  }\n`;\n\nconst GithubRibbon = (props: GithubRibbonProps) => {\n  return (\n    <GithubRibbonContainer>\n      <GithubRibbonLink href={props.url} target=\"_blank\" rel=\"noreferrer\">\n        Fork me on GitHub\n      </GithubRibbonLink>\n    </GithubRibbonContainer>\n  );\n};\n\nexport default GithubRibbon;\n","import config from \"./config.json\";\nimport { Config } from \"./types\";\n\nconst getConfig = (): Config => config;\n\nexport default getConfig;\n","import React from \"react\";\n\nconst BlockStrip = () => <div className=\"block-strip\" />;\n\nexport default BlockStrip;\n","import { Helmet } from \"react-helmet\";\n\ntype MetaProps = {\n  title: string;\n};\n\nconst Meta = ({ title }: MetaProps) => {\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n        <meta name=\"description\" content={title} />\n      </Helmet>\n    </>\n  );\n};\n\nexport default Meta;\n","import { Container, Row, Col } from \"reactstrap\";\nimport \"./App.scss\";\nimport Experience from \"./components/Experience\";\nimport Subtitle from \"./components/Subtitle\";\nimport ReadMore from \"./components/ReadMore\";\nimport List from \"./components/List\";\nimport TabularDetails, {\n  TabularDetail,\n  TabularDetailLink,\n} from \"./components/TabularDetails\";\nimport Br from \"./components/Br\";\nimport Portrait from \"./components/Portrait\";\nimport GithubRibbon from \"./components/GithubRibbon\";\nimport getConfig from \"./Config\";\nimport BlockStrip from \"./components/BlockStrip\";\nimport Meta from \"./components/Meta\";\n\nconst config = getConfig();\n\nconst App = () => {\n  const fullName = `${config.forenames} ${config.surname}`;\n  return (\n    <>\n      <Meta title={`${fullName} - ${config.profession}`} />\n      <BlockStrip />\n      <Container>\n        {config.githubRibbonUrl && (\n          <GithubRibbon url={config.githubRibbonUrl} />\n        )}\n        <Row>\n          <Col xs={12} sm={8} md={9} lg={10}>\n            <h1 className=\"text-center text-lg-left\">{fullName}</h1>\n            <Col xs={6} className=\"d-sm-none offset-3\">\n              <Portrait name={fullName} />\n            </Col>\n            <div className=\"h2 text-center text-lg-left\">\n              {config.profession}\n            </div>\n          </Col>\n          <Col\n            xs={6}\n            sm={4}\n            md={3}\n            lg={2}\n            className=\"d-none d-sm-block text-lg-right\"\n          >\n            <Portrait name={fullName} />\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={12}>\n            <Br />\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={12} lg={6}>\n            <Subtitle>Introduction</Subtitle>\n            {config.introductions.map((introduction, i) => (\n              <p key={i.toString()}>{introduction}</p>\n            ))}\n            <Br />\n\n            <Subtitle>Skills</Subtitle>\n            <List points={config.skills} />\n            <Br />\n\n            {config.complimentarySkills && (\n              <>\n                <Subtitle>Complimentary skills</Subtitle>\n                <List points={config.complimentarySkills} />\n                <Br />\n              </>\n            )}\n\n            <Subtitle>Me</Subtitle>\n            {config.me.map((m, i) => (\n              <p key={i.toString()}>{m}</p>\n            ))}\n            {config.meReadMore && (\n              <>\n                <ReadMore>\n                  {config.meReadMore.map((m, i) => (\n                    <p key={i.toString()}>{m}</p>\n                  ))}\n                </ReadMore>\n                <Br />\n              </>\n            )}\n\n            <Subtitle>Contact</Subtitle>\n            <TabularDetails>\n              <TabularDetail label=\"Surname\">{config.surname}</TabularDetail>\n              <TabularDetail\n                label={`Forename${config.forenames.length > 1 ? \"s\" : \"\"}`}\n              >\n                {config.forenames}\n              </TabularDetail>\n              {config.dob && (\n                <TabularDetail label=\"Birth\">{config.dob}</TabularDetail>\n              )}\n              {config.gender && (\n                <TabularDetail label=\"Gender\">{config.gender}</TabularDetail>\n              )}\n              <TabularDetail label=\"Location\">{config.location}</TabularDetail>\n              <TabularDetail label=\"Citizenship\">\n                {config.citizenship}\n              </TabularDetail>\n              {config.telephone && (\n                <TabularDetail label=\"Telephone\">\n                  {config.telephone}\n                </TabularDetail>\n              )}\n              {config.email && (\n                <TabularDetail label=\"Email\">{config.email}</TabularDetail>\n              )}\n            </TabularDetails>\n            <Br className=\"d-lg-none\" />\n          </Col>\n\n          <Col xs={12} lg={6}>\n            <Subtitle>Experience</Subtitle>\n            {config.experience.map((exp, i) => (\n              <Experience\n                key={i.toString()}\n                experience={exp}\n                noMargin={i === config.experience.length - 1}\n              />\n            ))}\n            <Br />\n\n            <Subtitle>Social</Subtitle>\n            {config.social && (\n              <TabularDetails links>\n                {config.social.map((social, i) => (\n                  <TabularDetailLink\n                    key={i.toString()}\n                    label={social.label}\n                    url={social.url}\n                  >\n                    {social.text}\n                  </TabularDetailLink>\n                ))}\n              </TabularDetails>\n            )}\n          </Col>\n          <Col xs={12}>\n            <Br />\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}